package pami.com.pamiimport android.graphics.Colorimport android.graphics.Typefaceimport android.graphics.Typeface.BOLDimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.util.Logimport android.view.Gravityimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.LinearLayoutimport android.widget.TableLayoutimport android.widget.TableRowimport android.widget.TextViewimport io.reactivex.android.schedulers.AndroidSchedulersimport java.text.DecimalFormatimport java.text.SimpleDateFormatimport java.util.*class ShiftsFragment : Fragment() {    lateinit var prevBtn: LinearLayout    lateinit var nextBtn: LinearLayout    var monthTv: TextView? = null    var selectedMonth: Int = 0    var selectedYear: Int = 0    var calendar: Calendar = Calendar.getInstance()    var table: TableLayout? = null    var shifts: MutableList<Shift>? = null    var df: DecimalFormat = DecimalFormat("00")    var simpleDateFormat = SimpleDateFormat("MMMM yyyy", Locale("swe"))    var selectedDate = Date()    lateinit var salaryView: TextView;    companion object {        fun getInstance(): ShiftsFragment {            return ShiftsFragment()        }    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {        val view = inflater.inflate(R.layout.fragment_shifts, container, false)        this.prevBtn = view.findViewById(R.id.prev_btn)        this.nextBtn = view.findViewById(R.id.next_btn)        monthTv = view.findViewById<TextView>(R.id.month_TV)        table = view.findViewById<TableLayout>(R.id.tableLayout)        this.salaryView = view.findViewById(R.id.salary_tv)        this.selectedDate = Date()        monthTv?.text = this.simpleDateFormat.format(this.selectedDate)        FirebaseController.getShifts().observeOn(AndroidSchedulers.mainThread()).subscribe() {            this.shifts = it;            setUpTable()        }        prevBtn?.setOnClickListener { view2 -> handleDateChange(view2) }        nextBtn?.setOnClickListener { view3 -> handleDateChange(view3) }        return view    }    private fun setUpTable() {        this.table?.removeAllViewsInLayout()        var totalMonthSalary = 0.0        var totalDuration = 0.0        val row = TableRow(context)        row.setBackgroundColor(Color.LTGRAY)        val tableHeaderViews = mutableListOf<TextView>()        val dayHeaderTV = TextView(context)        val startHeaderTV = TextView(context)        val endHeaderTV = TextView(context)        val durationHeaderTV = TextView(context)        val payHeaderTV = TextView(context)        dayHeaderTV.text = "Dag"        startHeaderTV.text = "Start"        endHeaderTV.text = "Slut"        durationHeaderTV.text = "LÃ¤ngd"        payHeaderTV.text = "Sek"        tableHeaderViews.add(dayHeaderTV)        tableHeaderViews.add(startHeaderTV)        tableHeaderViews.add(endHeaderTV)        tableHeaderViews.add(durationHeaderTV)        tableHeaderViews.add(payHeaderTV)        tableHeaderViews.forEach {            it.textSize = 16F            it.typeface = Typeface.MONOSPACE            it.gravity = Gravity.CENTER            it.setBackgroundResource(R.drawable.bg_bottom_border_gray)            it.setTextColor(Color.WHITE)            row.setBackgroundColor(resources.getColor(R.color.colorPrimaryDark))            row.addView(it)        }        val calendar = Calendar.getInstance()        calendar.time = selectedDate        this.table?.addView(row)        shifts?.forEach {            if (it.startTime.month == calendar.get(Calendar.MONTH) + 1 && it.startTime.year == calendar.get(Calendar.YEAR)) {                totalMonthSalary += it.ObnattMoney + it.Obmoney + it.duration * it.employeeSalary                totalDuration += it.duration                val row = TableRow(context)                var tableCells: MutableList<TextView> = mutableListOf()                val dayTV = TextView(context)                val startTV = TextView(context)                val endTV = TextView(context)                val durationTV = TextView(context)                val payTV = TextView(context)                dayTV.text = String.format("%02d", it.startTime.day)                startTV.text = df.format(it.startTime.hour) + ":" + df.format(it.startTime.minute)                endTV.text = df.format(it.endTime.hour) + ":" + df.format(it.endTime.minute)                durationTV.text = String.format("%.2f", it.duration) + " h"                payTV.text = String.format("%.2f", ((it.duration * it.employeeSalary) + it.Obmoney + it.ObnattMoney))                tableCells.add(dayTV)                tableCells.add(startTV)                tableCells.add(endTV)                tableCells.add(durationTV)                tableCells.add(payTV)                tableCells.forEach {                    it.gravity = Gravity.CENTER                    it.textSize = 15F                    it.typeface = Typeface.MONOSPACE//                    it.setBackgroundResource(R.drawable.bg_bottom_border_gray)                    if (this.table?.childCount!! % 2 != 0) {//                        row.setBackgroundResource(R.color.main_gray)                    }                    row.addView(it)                }                row.setBackgroundResource(R.drawable.bg_bottom_border_gray)                row.setPadding(0, 50, 0, 50)                this.table?.addView(row)            }        }        val lastRow = TableRow(context)        val totalCell = TextView(context)        totalCell.text = String.format("%.2f", totalMonthSalary)        totalCell.setTypeface(Typeface.MONOSPACE, BOLD)        totalCell.setTextColor(Color.BLACK)        totalCell.setBackgroundResource(R.drawable.table_cell_bg)        totalCell.setPadding(0, 50, 0, 50)        totalCell.gravity = Gravity.CENTER        this.salaryView.text = String.format("%.2f", totalMonthSalary) + " Sek"        val totalDurationCell = TextView(context)        totalDurationCell.text = changeDecimalToMinutesForm(totalDuration) + " h"        totalDurationCell.setTypeface(Typeface.MONOSPACE, BOLD)        totalDurationCell.setTextColor(Color.BLACK)        totalDurationCell.gravity = Gravity.CENTER        totalDurationCell.setBackgroundResource(R.drawable.table_cell_bg)        totalDurationCell.setPadding(0, 50, 0, 50)        lastRow.addView(TextView(context))        lastRow.addView(TextView(context))        lastRow.addView(TextView(context))        lastRow.addView(totalDurationCell)        lastRow.addView(totalCell)        this.table?.addView(lastRow)    }    private fun changeDecimalToMinutesForm(totalDuration: Double): String {        var hour = 0;        var minutes = 0;        var dec = totalDuration - totalDuration.toInt()        Log.d("pawell", dec.toString())        return String.format("%.2f", totalDuration)    }    private fun handleDateChange(view: View?) {        var fix = 0        if (view == prevBtn) {            fix = -1        }        if (view == nextBtn) {            fix = 1        }        calendar.add(Calendar.MONTH, fix)        this.selectedDate = calendar.time        monthTv?.text = simpleDateFormat.format(this.selectedDate);        setUpTable()    }    private fun setUpMonthPicker() {        selectedMonth = calendar.get(Calendar.MONTH)        selectedYear = calendar.get(Calendar.YEAR)        var df = DecimalFormat("00");        monthTv?.text = df.format(selectedMonth + 1) + "-" + selectedYear.toString();    }    fun getShifts(V: View) {        FirebaseController.getShifts().subscribe() {            it.forEach({            })        }    }}